const kp: float = 0.12
const ki: float = 0.08
const kd: float = 0.01
const max_velocity: float = 200.0
const turntime: int = 2
const swiveltime: int = 2


node find_velocities(speed:int) returns (v_l, v_r: int)
let
	(v_l, v_r) = if (speed > 250) then (0, 250)
		     else if (speed < -250) then (250, 0)
		     else if (speed < 0) then (250 , 250 + speed)
		     else (250 - speed, 250);
tel


node  adacrus(left_wl, center_wl, right_wl, comms: int) returns (v_l, v_r: int; nod: bool)
var error, difference_error, integration_error, speed: int;
    
let

   nod = ((right_wl = 0) and (center_wl = 0) and (left_wl = 0));
   
   error =  0 -> if (center_wl = 0) then 0 
                 else if (((right_wl - left_wl) = 0) and (center_wl = 1)) then (0 -> -pre(error)) 
                 else (150 * (right_wl - left_wl));
   difference_error = error -> error - pre(error);
   integration_error = 0 -> pre(integration_error) + error;                            
   
   speed = 0 -> 1 * error;

       automaton
	        state Forward
                      do
                         (v_l,v_r) = find_velocities(speed);
                      unless nod then Order
                      
	        state Order
	              do 
	                 v_l = 0;
	                 v_r = 0;
	             unless (comms = 1) then Forward  
	              |     (comms = 2) then LTurn
	              |     (comms = 3) then RTurn
	              |     (comms = 4) then LSwi
	              |     (comms = 5) then RSwi
	              |     (comms = 6) then Fwdimpulse
	              |     (comms = 7) then DoubleSwi
                                      
                state LTurn
                      var t: int;
                      do     
                         v_l = 50;
                         v_r = 200;
                         t = 0 -> pre(t) + 1;
                      until (t = turntime) then Forward

                state RTurn
                      var t: int;
                      do     
                          v_l = 200;
                          v_r = 50;
                          t = 0 -> pre(t) + 1;
                      until (t = turntime) then Forward
                                     
                state LSwi
                      var t: int;
                      do     
                          v_l = -200;
                          v_r =  200;
                          t = 0 -> pre(t) + 1;
                      until (t = swiveltime) then Fwdimpulse

                state RSwi
                      var t: int;
                      do     v_l = 200;
                             v_r = -200;
                             t = 0 -> pre(t) + 1;
                      until (t = swiveltime) then Fwdimpulse
                         
                state Fwdimpulse
                      var t: int;
                      do    v_l = 200 -> 0;
                            v_r = 200 -> 0;
                            t = 0 -> pre(t) + 1;
                      until (t = 1) then Order
                      
                state DoubleSwi
                      var t,t2: int;
                      do     t2 = swiveltime + swiveltime;
                             v_l = 200;
                             v_r = -200;
                             t = 0 -> pre(t) + 1;
                      until (t = t2) then Forward      
                  
       end
                   
tel

node main(left_wl, center_wl, right_wl, comms: int) returns (v_l, v_r: int; nod: bool)
let
     (v_l, v_r, nod) = adacrus(left_wl, center_wl, right_wl, comms);
tel


